{"pageProps":{"page":{"language":"en","name":"The shape of the CMS to come","slug":"the-shape-of-the-cms-to-come","meta":{"title":"The shape of the CMS to come","description":"In this article I express my vision about the future of Content Management Systems. I think that CMSs haven't yet taken advantage of the convergence between Code and Design that we are witnessing in the web development world.","language":"en","featuredImage":"https://images.reactbricks.com/original/f21218d5-101b-4a75-b517-1ebd7d3d67aa.png","image":{"alt":"","placeholderSrc":"","seoName":"","src":"https://images.reactbricks.com/original/f21218d5-101b-4a75-b517-1ebd7d3d67aa.png","srcSet":"","_t":"rb-email-404"}},"type":"blog","contentVersion":2,"content":[{"id":"304350fc-526c-4352-a4e5-a9b683219364","type":"title","props":{"title":[{"type":"paragraph","children":[{"text":"The shape of the CMS to come"}]}]}},{"id":"f0236efa-94e2-4bdc-8b5e-6a48e6ca29af","type":"paragraph","props":{"text":[{"type":"paragraph","children":[{"text":"In this article I express my vision about the future of Content Management Systems. I think that CMSs haven't yet taken advantage of the convergence between Code and Design that we are witnessing in the web development world."}]},{"type":"paragraph","children":[{"text":"Quite the opposite, the separation of concerns between frontend and backend, which developers love, leads to a worse user experience for content editors."}]},{"type":"paragraph","children":[{"text":"I think that now's the time for this to change."}]}]}},{"id":"bee93360-5bab-4f8e-a78b-b8f62f62da8b","type":"paragraph","props":{"text":[{"type":"h2","children":[{"text":"Three players"}]},{"type":"paragraph","children":[{"text":"Three kind of people are involved in the adoption and use of a CMS: "},{"text":"Content editors","bold":true},{"text":", "},{"text":"Designers","bold":true},{"text":" and "},{"text":"Developers","bold":true},{"text":". These people represent the core parts of a CMS: the content, its presentation and the infrastructure to deliver it. A great CMS today needs to satisfy the requirements of all of them."}]},{"type":"paragraph","children":[{"text":"Let’s see what these requirements are."}]}]}},{"id":"e69490d5-cb42-4742-be36-c052806c328a","type":"paragraph","props":{"text":[{"type":"h2","children":[{"text":"CMS requirements"}]},{"type":"h4","children":[{"text":"The Content editor’s dream"}]},{"type":"paragraph","children":[{"text":"For the content editor, the CMS should be "},{"text":"simple","bold":true},{"text":" to use, "},{"text":"flexible","bold":true},{"text":" (freedom in content creation), but should also give a sort of “"},{"text":"guided","bold":true},{"text":"” editing experience to avoid repetition and errors."}]}]}},{"id":"f92f5bd3-b9e4-489b-a35f-10d6922832af","type":"paragraph","props":{"text":[{"type":"h4","children":[{"text":"The Developer’s dream"}]},{"type":"paragraph","children":[{"text":"Developers love the "},{"text":"separation of concerns","bold":true},{"text":" given by "},{"text":"APIs","bold":true},{"text":" on the backend and a "},{"text":"modern stack","bold":true},{"text":" frontend. The "},{"text":"freedom to host","bold":true},{"text":" the website anywhere is a plus, too."}]}]}},{"id":"369967a9-9f10-44a6-bbe2-bd50d6eb52b4","type":"paragraph","props":{"text":[{"type":"h4","children":[{"text":"The Designer’s dream"}]},{"type":"paragraph","children":[{"text":"Designers look for a way to enforce a "},{"text":"coherent UX / UI / brand identity","bold":true},{"text":". This leads to the desire to speak a "},{"text":"common language","bold":true},{"text":" with developers and have a set of "},{"text":"rules","bold":true},{"text":" that prevents content editors from breaking the design."}]}]}},{"id":"52f31202-0097-417c-9395-3204906acb11","type":"image","props":{"image":{"src":"https://images.reactbricks.com/original/b507752b-8838-4511-acd3-8ce0abac91a9.png","placeholderSrc":"https://images.reactbricks.com/placeholder/b507752b-8838-4511-acd3-8ce0abac91a9.png","srcSet":"https://images.reactbricks.com/src_set/b507752b-8838-4511-acd3-8ce0abac91a9-1600.png 1600w,\nhttps://images.reactbricks.com/src_set/b507752b-8838-4511-acd3-8ce0abac91a9-1200.png 1200w,\nhttps://images.reactbricks.com/src_set/b507752b-8838-4511-acd3-8ce0abac91a9-800.png 800w,\nhttps://images.reactbricks.com/src_set/b507752b-8838-4511-acd3-8ce0abac91a9-400.png 400w,\nhttps://images.reactbricks.com/src_set/b507752b-8838-4511-acd3-8ce0abac91a9-200.png 200w","width":2000,"height":1000,"alt":"","seoName":""}}},{"id":"c64a2850-649a-4a99-a3e1-2e78e2aa6437","type":"paragraph","props":{"text":[{"type":"h2","children":[{"text":"Current solutions"}]},{"type":"h4","children":[{"text":"The Content editor’s tool: WYSIWYG"}]},{"type":"paragraph","children":[{"text":"Traditional CMSs have a great feature for content editors: the WYSIWYG editing. "},{"text":"Seeing in real time","bold":true},{"text":" how the content will be visible on the frontend is a great feature. With traditional CMSs like Wordpress, typically this feature comes with the drawback of "},{"text":"too much power","bold":true},{"text":". With a blank WYSIWYG page, editors can do whatever they want, so the brand identity may suffer. As soon as you try to impose rules (for example using ACF custom post types in Wordpress) you suddenly loose the WYSIWYG ability and you are back to gray forms."}]}]}},{"id":"32af23ba-1ba1-4687-9acd-a9cdad72c617","type":"paragraph","props":{"text":[{"type":"h4","children":[{"text":"The front-end developer’s tool: Headless CMSs"}]},{"type":"paragraph","children":[{"text":"A headless CMS takes care of the “back-end” side of a CMS, providing the database, the APIs and often the web interface to edit content. APIs provide the separation of concerns between the backend and the frontend that developers love, because REST (or GraphQL) "},{"text":"APIs are frontend agnostic","bold":true},{"text":"."}]}]}},{"id":"28a42a81-2548-4a10-8038-26b5920d54c8","type":"paragraph","props":{"text":[{"type":"h4","children":[{"text":"…with a JS frontend"}]},{"type":"paragraph","children":[{"text":"Using a Headless CMS, front-end developers have a ready-to-use backend, so they are free to create the front-end site with the tool they love, in particular using a Javascript framework like React, Vue or Angular."}]},{"type":"paragraph","children":[{"text":"Two technologies allow to have great performance and SEO friendliness with Single Page Applications: "},{"text":"Server Side Rendering (SSR) ","bold":true},{"text":"and "},{"text":"Static Site Generation (SSG)","bold":true},{"text":"."}]}]}},{"id":"5f84f074-bde1-42e2-899d-2c5028a097e5","type":"paragraph","props":{"text":[{"type":"h4","children":[{"text":"Static websites"}]},{"type":"paragraph","children":[{"text":"In particular, I think that Static Site Generation is very promising."}]},{"type":"paragraph","children":[{"text":"Static websites are:"}]},{"type":"ul","children":[{"type":"li","children":[{"text":"Really fast","bold":true},{"text":" (no DB queries at runtime, smart content preload, distribution via CDN)"}]},{"type":"li","children":[{"text":"Easy to host","bold":true},{"text":" (on a cloud platform like "},{"type":"link","url":"https://www.netlify.com/","children":[{"text":"Netlify"}]},{"text":" or "},{"type":"link","url":"https://vercel.com/home","children":[{"text":"Zeit"}]},{"text":" Now you can often stay inside the free tier)"}]},{"type":"li","children":[{"text":"Robust","bold":true},{"text":" (they don’t need a complex infrastructure and what there’s not doesn’t break)"}]},{"type":"li","children":[{"text":"Secure","bold":true},{"text":" (they offer a minimal attack surface)"}]}]}]}},{"id":"433b4201-56cf-406f-9759-8eed9b2d3f79","type":"paragraph","props":{"text":[{"type":"h4","children":[{"text":"WYSIWYG is gone with the Head"}]},{"type":"paragraph","children":[{"text":"This separation of concerns between content and its presentation, which is great for developers, kills the WYSIWYG editing interface that content editors love. The content creation interface provided by the headless CMS, in fact, knows nothing about how the content will be formatted by the frontend. The result is a "},{"text":"worse user experience ","bold":true},{"text":"for the editors. There are other problems, too, like having links from a resource to another inside a text, since on the frontend, the internal "},{"text":"links","bold":true},{"text":" should be replaced with framework specific tags to use a push-history based client-side router."}]}]}},{"id":"33db498b-2c50-4a4d-9064-0952aca62444","type":"paragraph","props":{"text":[{"type":"h4","children":[{"text":"The Designer’s tool: Design system"}]},{"type":"paragraph","children":[{"text":"A design system (designers please forgive my simplified definition) is a set of visual components, rules and resources that helps keeping a coherent brand identity and user experience."}]},{"type":"paragraph","children":[{"text":"So, to deploy a design system in a CMS we need to:"}]},{"type":"ul","children":[{"type":"li","children":[{"text":"Define a set of "},{"text":"visual components","bold":true},{"text":" shared with the Developers"}]},{"type":"li","children":[{"text":"Enforce the "},{"text":"correct use","bold":true},{"text":" of this components (blocks) by Editors"}]}]}]}},{"id":"21c74c6a-9217-4ac3-bbb1-828cc49ffe99","type":"paragraph","props":{"text":[{"type":"h4","children":[{"text":"JSX as a common language?"}]},{"type":"paragraph","children":[{"text":"I think that the best choice today for a common language shared between Developers and Designers to define visual components is JSX. It is very "},{"text":"similar to HTML but much more expressive","bold":true},{"text":". I may have a bias toward JSX because I love React, but you can use JSX with Vue, too. Maybe in the future the best choice will be the standardized Web components, but today I’d bet on JSX. "},{"text":"JSX props","bold":true},{"text":" are also a great way to limit the Editors interface and set rules on what can or cannot be done with a component."}]}]}},{"id":"41bd214e-a241-4593-8db8-4b678cac0eb2","type":"paragraph","props":{"text":[{"type":"h4","children":[{"text":"Hybrid CMS: a false solution"}]},{"type":"paragraph","children":[{"text":"We saw that with a headless CMS we loose one of the big win of a traditional CMS, which is the ability to edit content with a WYSIWYG editor. Hybrid CMSs try to solve this problem by proposing a sort of traditional CMS which exposes APIs too, as Wordpress with REST APIs does. In this way "},{"text":"the provided frontend is optional","bold":true},{"text":". The reality is that, based on how you use it, you either have the WYSIWYG editing or the APIs, but not both at once. In practice I think that the existing "},{"text":"hybrid CMSs wink more at the editors","bold":true},{"text":", as they usually are on the "},{"text":"“no code”","bold":true},{"text":" side, providing just an API sugar pill for developers, which won’t be used on the websites without loosing the benefits of the hybrid approach."}]}]}},{"id":"a516138b-8f7a-4d9d-80d0-6a6dd6b2db79","type":"image","props":{"image":{"src":"https://images.reactbricks.com/original/db6c87e2-60e3-4a5f-b7a6-aa15137fb84f.png","placeholderSrc":"https://images.reactbricks.com/placeholder/db6c87e2-60e3-4a5f-b7a6-aa15137fb84f.png","srcSet":"https://images.reactbricks.com/src_set/db6c87e2-60e3-4a5f-b7a6-aa15137fb84f-1600.png 1600w,\nhttps://images.reactbricks.com/src_set/db6c87e2-60e3-4a5f-b7a6-aa15137fb84f-1200.png 1200w,\nhttps://images.reactbricks.com/src_set/db6c87e2-60e3-4a5f-b7a6-aa15137fb84f-800.png 800w,\nhttps://images.reactbricks.com/src_set/db6c87e2-60e3-4a5f-b7a6-aa15137fb84f-400.png 400w,\nhttps://images.reactbricks.com/src_set/db6c87e2-60e3-4a5f-b7a6-aa15137fb84f-200.png 200w","width":2000,"height":1000,"alt":"","seoName":""}}},{"id":"d44af8ba-5a0f-45e8-903b-341378112509","type":"paragraph","props":{"text":[{"type":"h2","children":[{"text":"The shape of the CMS to come"}]},{"type":"paragraph","children":[{"text":"How can we have at the same time the "},{"text":"WYSIWYG editing","bold":true},{"text":" experience and the custom frontends created with "},{"text":"JS frameworks like","bold":true},{"text":" "},{"type":"link","url":"https://reactjs.org/","children":[{"text":"React"}]},{"text":", "},{"type":"link","url":"https://nextjs.org/","children":[{"text":"Next.js"}]},{"text":", "},{"type":"link","url":"https://www.gatsbyjs.com/","children":[{"text":"Gatsby"}]},{"text":", while keeping the ability to self host the frontend? How can we enforce a design system in the editing content interface?"}]}]}},{"id":"d24104f2-0891-43c9-935e-236cc803c6f5","type":"paragraph","props":{"text":[{"type":"h4","children":[{"text":"A shared schema"}]},{"type":"paragraph","children":[{"text":"I think that "},{"text":"the key is a shared schema between the editing interface and the frontend","bold":true},{"text":"."}]}]}},{"id":"130be5b3-3a7a-439e-8e92-52b6baba79b1","type":"image","props":{"image":{"src":"https://images.reactbricks.com/original/741e886c-11bc-4734-983e-9a660a47246a.png","placeholderSrc":"https://images.reactbricks.com/placeholder/741e886c-11bc-4734-983e-9a660a47246a.png","srcSet":"https://images.reactbricks.com/src_set/741e886c-11bc-4734-983e-9a660a47246a-1400.png 1400w,\nhttps://images.reactbricks.com/src_set/741e886c-11bc-4734-983e-9a660a47246a-1200.png 1200w,\nhttps://images.reactbricks.com/src_set/741e886c-11bc-4734-983e-9a660a47246a-800.png 800w,\nhttps://images.reactbricks.com/src_set/741e886c-11bc-4734-983e-9a660a47246a-400.png 400w,\nhttps://images.reactbricks.com/src_set/741e886c-11bc-4734-983e-9a660a47246a-200.png 200w","width":1400,"height":700,"alt":"","seoName":""}}},{"id":"afeab13d-166f-4b50-aa28-2bb84cd7947b","type":"paragraph","props":{"text":[{"type":"paragraph","children":[{"text":"This schema is a set of "},{"text":"web components and rules","bold":true},{"text":" created by Designers and Developers. I think this components will be defined in "},{"text":"JSX","bold":true},{"text":", so that the rules may take advantage of the components' "},{"text":"“props”","bold":true},{"text":". The CMS will provide a way to WYSIWYG edit part of this content, with some props (like image ALT-text or background color) edited “off-canvas”. Any choice the content editor will make should be easy and guided, with a limited (but complete) set of available options. In this way the "},{"text":"APIs will just return the JSON content","bold":true},{"text":" of an entity. "},{"text":"The frontend","bold":true},{"text":", using a library provided by the CMS and the shared set of rules / components, will simply render the exactly same interface that the content editor saw in the editing area."}]}]}},{"id":"0e7f95a8-b75c-4690-a673-89fdb39eccf7","type":"paragraph","props":{"text":[{"type":"h3","children":[{"text":"The first brick"}]},{"type":"ul","children":[{"type":"li","children":[{"text":"Good news: we are trying to create just this kind of CMS: its name will be "},{"text":"React Bricks","bold":true},{"text":" :)"}]},{"type":"li","children":[{"text":"Bad news: it’s a "},{"text":"hard","bold":true},{"text":" task."}]},{"type":"li","children":[{"text":"But: we firmly believe in this vision, we are excited by the project and "},{"text":"we almost have a prototype","bold":true},{"text":" in place."}]}]}]}},{"id":"336d911a-b200-4db6-9816-e407bc18b21a","type":"paragraph","props":{"text":[{"type":"h4","children":[{"text":"What are the hard tasks?"}]},{"type":"paragraph","children":[{"text":"The first one is the "},{"text":"components and schema definition","bold":true},{"text":": we’d like to have it edited from the admin interface, by user with Designer or Developer role. But it’s not simple: we’d need to rebuild something like "},{"type":"link","url":"https://codesandbox.io/","children":[{"text":"Code Sandbox"}]},{"text":" to let the users use also external dependencies in their block components. The first prototype will be a create-react-app based project to be cloned, which is used to create the content editing dashboard. In this project you will define and test components and schema."}]}]}},{"id":"91e033fc-a820-4ab9-90bc-3a800e4054ae","type":"paragraph","props":{"text":[{"type":"paragraph","children":[{"text":"The second one is the way to "},{"text":"share the schema","bold":true},{"text":", blocks and styles between the content editing interface and the frontend. I can think of 3 ways:"}]},{"type":"ul","children":[{"type":"li","children":[{"text":"Copy and paste code from the admin project to the frontend"}]},{"type":"li","children":[{"text":"Have a "},{"type":"link","url":"https://www.npmjs.com/","children":[{"text":"npm"}]},{"text":" (or our registry) repository"}]},{"type":"li","children":[{"text":"Share it via the CMS database"}]}]},{"type":"paragraph","children":[{"text":"We’ll start with the first solution. Our target is implementing the third one."}]}]}},{"id":"615e7c6a-a105-4ca0-93ff-00e34e6bbf59","type":"quote","props":{"quote":[{"type":"paragraph","children":[{"text":"Update Feb 12, 2020"}]},{"type":"quote","children":[{"text":"I solved the problem in a completely new way: the admin and the front-end are just the same Next.js or Gatsby project! ("},{"text":"/admin","code":true},{"text":") ??"}]}]}},{"id":"05d0aa67-64b5-40d8-a977-bbc042296660","type":"paragraph","props":{"text":[{"type":"paragraph","children":[{"text":"The third hard task is "},{"text":"decoupling the CSS styles between the admin interface and the edited content","bold":true},{"text":". To start, we’ll embrace "},{"type":"link","url":"https://tailwindcss.com/","children":[{"text":"Tailwind CSS"}]},{"text":" for both React Bricks and the content components. We’ll overcome this limitation in the following releases."}]}]}},{"id":"90f71922-4690-47a9-b181-cb125490c59c","type":"quote","props":{"quote":[{"type":"paragraph","children":[{"text":"Update Feb 5, 2020"}]},{"type":"quote","children":[{"text":"I solved the CSS decoupling problem by using React portals! ?"}]}]}},{"id":"1d1d146c-1304-45cc-8d45-1267ea9a0c6b","type":"paragraph","props":{"text":[{"type":"paragraph","children":[{"text":"While we are working hard to finish the prototype and a complete demo, please, let me know what you think of my vision."}]}]}},{"id":"a3652873-ef0e-4392-86b8-7d94bfc03dd1","type":"paragraph","props":{"text":[{"type":"paragraph","children":[{"text":"Thank you for your time and... stay tuned to receive updates on "},{"type":"link","url":"https://reactbricks.com/","children":[{"text":"React Bricks!","bold":true}]},{"text":""}]}]}}],"customValues":{},"status":"PUBLISHED","isLocked":false,"createdAt":"2022-07-26T06:22:00.000Z","updatedAt":"2023-12-04T11:53:30.000Z","publishedAt":"2020-01-22T00:00:00.000Z","tags":["react-bricks-cms"],"translations":[{"language":"en","slug":"the-shape-of-the-cms-to-come","name":"The shape of the CMS to come"}],"id":"91bd89ec-4e2d-4ff5-87ad-36fe61a69613","author":{"firstName":"JingPing","lastName":"WANG","company":"","avatarUrl":""},"externalData":{}}},"__N_SSG":true}